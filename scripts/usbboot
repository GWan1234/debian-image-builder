#!/bin/bash
source lib/source
validation
if [[ -f "board.txt" ]]; then . board.txt; else noboard; fi
source userdata.txt
source lib/function/${FAMILY}

if [[ -d "sysroot" ]] || [[ -d "p1" ]]; then make clean; clear -x; fi
if [[ "$PLATFORM" == "allwinner" || "$PLATFORM" == "amlogic" ]]; then
	:;
else
	echo "${PLATFORM} is not supported."
	exit 1
fi
if [[ -d "output/${BOARD}" ]] && [[ `ls output/${BOARD}/u-boot-*.deb` ]]; then
	:;
else
	echo -e "Missing u-boot package"
	exit 1
fi
# parted offset conversion
if [[ "$OFFSET" =~ ^(4096|8192)$ ]]; then IMG_OFFSET="4MiB"; fi
if [[ "$OFFSET" == "32768" ]]; then IMG_OFFSET="16MiB"; fi

P_BOOT="p1"
IMAGE_FOLDER="img/"
USB_BOOT_IMAGE="${DTB}-usb-boot.img"
BOOT_LABEL="BOOT"
BOOTFS="mkfs -t vfat -n"
BOOT_SCRIPT="files/boot/scripts/usbboot.cmd"
if [[ -f "$USB_BOOT_IMAGE" ]]; then rm -f $USB_BOOT_IMAGE; fi
echo -en "${FAMILY}: " | sed -e 's/\(.*\)/\U\1/'
echo -e "${DEFAULT_MOTD}" | sed -e 's/\(.*\)/\U\1/'
mkdir -p "$IMAGE_FOLDER"

partition (){
truncate -s 32MB "${IMAGE_FOLDER}${USB_BOOT_IMAGE}"
parted --script "${IMAGE_FOLDER}${USB_BOOT_IMAGE}" \
mklabel msdos \
mkpart primary fat32 ${IMG_OFFSET} 100%
parted --script "${IMAGE_FOLDER}${USB_BOOT_IMAGE}" set 1 boot on
IMAGE_LOOP_DEV="$(losetup --show -P -f ${IMAGE_FOLDER}${USB_BOOT_IMAGE})"
IMAGE_LOOP_DEV_BOOT="${IMAGE_LOOP_DEV}${P_BOOT}"
MAKE_BOOTFS="${BOOTFS} ${BOOT_LABEL} ${IMAGE_LOOP_DEV_BOOT}"
partprobe "${IMAGE_LOOP_DEV}"
mkdir -p ${P_BOOT}
$MAKE_BOOTFS
mount "${IMAGE_LOOP_DEV_BOOT}" ${P_BOOT}
flash_uboot
sync
if [[ -f "${BOOT_SCRIPT}" ]]; then
	cp -f ${BOOT_SCRIPT} p1/boot.cmd
	echo "# mkimage -C none -A ${ARCH} -T script -d boot.cmd boot.scr" >> p1/boot.cmd
	mkimage -C none -A ${ARCH} -T script -d p1/boot.cmd p1/boot.scr
	sleep .50
	umount ${P_BOOT}
	losetup -d "${IMAGE_LOOP_DEV}"
	mv "${IMAGE_FOLDER}${USB_BOOT_IMAGE}" "${USB_BOOT_IMAGE}"
	rmdir "${IMAGE_FOLDER}"
	rmdir p1
	echo ""
else
	echo -e "${BOOT_SCRIPT}"
	sleep .50
	umount ${P_BOOT}
	losetup -d "${IMAGE_LOOP_DEV}"
	mv "${IMAGE_FOLDER}${USB_BOOT_IMAGE}" "${USB_BOOT_IMAGE}"
	rmdir "${IMAGE_FOLDER}"
	rmdir p1
	echo ""
	rm -f $USB_BOOT_IMAGE
	exit 0
fi
}

if [ $VERBOSE -eq 1 ]; then partition; else partition > /dev/null 2>&1; fi
if [[ -f "${USB_BOOT_IMAGE}" ]]; then ls -ls $USB_BOOT_IMAGE; fi

exit 0
