#!/bin/bash
# LINUX KERNEL VARIABLES AND FUNCTIONS

DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"

sources_dir (){
mkdir -p ${SRC}
cp -f board.txt ${SRC}/
cd ${SRC}
}

report_dir_error (){
echo "NOTICE: Directory ${KERNEL}-${VERSION} is MIA. Please make a report."
echo ""
exit 0
}

report_tarball_error (){
echo "NOTICE: Tarball ${KERNEL}-${VERSION} is MIA. Please make a report."
echo ""
exit 0
}

linux_prng (){
if [[ "$VERSION" =~ ^([0-9].[0-9].y|[0-9].[0-9][0-9].y)$ ]]; then
	URL="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
	if [[ `wget -S --spider ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
		curl --silent -L ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} | grep -m1 "VERSION" | \
		sed 's/VERSION = //g' > revision.txt
		curl --silent -L ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} | grep -m1 "PATCHLEVEL" | \
		sed 's/PATCHLEVEL = /./g' >> revision.txt
		if [[ `curl --silent -L ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} | grep -m1 "SUBLEVEL" | \
			sed 's/SUBLEVEL = /./g' | grep -w ".0"` ]]; then :;
		else
			curl --silent -L ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} | grep -m1 "SUBLEVEL" | \
			sed 's/SUBLEVEL = /./g' >> revision.txt
		fi
		curl --silent -L ${URL}/plain/Makefile?h=${KERNEL}-${VERSION} | grep -m1 "EXTRAVERSION" | \
		sed 's/EXTRAVERSION =//g' | sed 's/ //g' >> revision.txt
		REVISION=$(tr -d '\n' < revision.txt)
		VERSION="${REVISION}"
		rm -f revision.txt
	fi
else
	if [[ "$VERSION" =~ ^(stable|rc)$ ]]; then
		URL="https://kernel.org"
		STABLE=$(curl -s $URL/releases.json | jq '.latest_stable.version' -r)
		RC=$(curl -s $URL | grep -A1 'mainline:' | grep -oP '(?<=strong>).*(?=</strong.*)')
		if [[ "$VERSION" == "stable" ]]; then VERSION="${STABLE}"; else
		if [[ "$VERSION" == "rc" ]]; then VERSION="${RC}"; fi; fi
	fi
fi
}

download (){
if [[ -n "$GIT_KERNELORG" ]] && [[ "$GIT_KERNELORG" == "true" ]]; then
	GIT_STABLE="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tag/?h=v${VERSION}"
	GIT_TORVALDS="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tag/?h=v${VERSION}"
	if [[ `wget -S --spider ${GIT_STABLE} 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then GIT_REPO="stable"; else
		if [[ `wget -S --spider ${GIT_TORVALDS} 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then GIT_REPO="torvalds"; else
			echo -e "The git branch v${VERSION} is not available?"; exit 0; fi
	fi
	GIT_URL="https://git.kernel.org/pub/scm/linux/kernel/git/${GIT_REPO}/linux.git"
	if [[ -d "${KERNEL}-${VERSION}" ]] && [[ -d "${KERNEL}-${VERSION}.backup" ]]; then
		echo -en "${KERNEL}-${VERSION}" | sed -e "s/\b\(.\)/\u\1/g"
		echo -en " ${PNK}[${FIN}${YLW}restoring${FIN}${PNK}]${FIN}"
		rm -fdr ${KERNEL}-${VERSION}
		echo -en " ${WHT}...${FIN}"
		cp -r ${KERNEL}-${VERSION}.backup ${KERNEL}-${VERSION}
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	else
		if [[ -d "${KERNEL}-${VERSION}" ]]; then
			echo -en "${KERNEL}-${VERSION}" | sed -e "s/\b\(.\)/\u\1/g"
			echo -en " ${PNK}[${FIN}${YLW}removing${FIN}${PNK}]${FIN}"
			rm -fdr ${KERNEL}-${VERSION}
			echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
			echo ""
		fi
		echo -e "This may take a while ..."
		echo ""
		git clone -c advice.detachedHead=false --depth 1 -b v${VERSION} ${GIT_URL} ${KERNEL}-${VERSION}
		sleep .50
		if [[ -d "${KERNEL}-${VERSION}" ]] && [[ -f "${KERNEL}-${VERSION}/Makefile" ]]; then
			echo ""
			echo -en "${KERNEL}-${VERSION}" | sed -e "s/\b\(.\)/\u\1/g"
			echo -en " ${PNK}[${FIN}${WHT}creating backup${FIN}${PNK}]${FIN}"
			cp -r ${KERNEL}-${VERSION} ${KERNEL}-${VERSION}.backup
			echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
		else
			echo ""
			echo -en "${KERNEL}-${VERSION}" | sed -e "s/\b\(.\)/\u\1/g"
			echo -en " ${PNK}[${FIN}${WHT}download${FIN}${PNK}]${FIN}"
			echo -e " ${PNK}[${FIN}${RED}failed${FIN}${PNK}]${FIN}"
			exit 1
		fi
	fi
else
	download_tarball
fi
}

download_tarball (){
if [[ -d "${KERNEL}-${VERSION}" ]]; then
	echo -en "${KERNEL}-${VERSION}" | sed -e "s/\b\(.\)/\u\1/g"
	echo -en " ${PNK}[${FIN}${YLW}removing${FIN}${PNK}]${FIN}"
	rm -fdr ${KERNEL}-${VERSION}
	echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
	echo ""
fi
KERNELORG="https://git.kernel.org/torvalds/t/"
if [[ `wget -S --spider ${KERNELORG}${KERNEL}-${VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	if [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
		echo_extract
		pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
	else
		echo -e "${WHT}Downloading ${KERNEL}-${VERSION}${FIN} ..."
		${DOWNLOAD} ${KERNELORG}${KERNEL}-${VERSION}.tar.gz
		echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
		if [[ -f "${KERNEL}-${VERSION}.tar.gz" ]]; then
			echo ""
			echo_extract
			pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
		else
			report_tarball_error
		fi
	fi
else
	RELEASE=`echo "$VERSION" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@'`
	KERNELORG="https://cdn.kernel.org/pub/linux/kernel/v${RELEASE}.x/"
	if [[ `wget -S --spider ${KERNELORG}${KERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
		if [[ -f "${KERNEL}-${VERSION}.tar.xz" ]]; then
			echo_extract
			pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
		else
			echo -e "${WHT}Downloading ${KERNEL}-${VERSION}${FIN} ..."
			${DOWNLOAD} ${KERNELORG}${KERNEL}-${VERSION}.tar.xz
			echo -e " ${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
			if [[ -f "${KERNEL}-${VERSION}.tar.xz" ]]; then
				echo ""
				echo_extract
				pv ${KERNEL}-${VERSION}.tar.xz | tar -xJ ${KERNEL}-${VERSION}
			else
				report_tarball_error
			fi
		fi
	else
		echo -e "${KERNEL}-${VERSION} is not available."
		exit 0
	fi
fi
}

setup (){
sleep .75
if [[ -d "${KERNEL}-${VERSION}" ]]; then
	cd ${KERNEL}-${VERSION}
	export ARCH=${ARCH}
	# remove builddeb and mkdebian scripts
	rm -f scripts/package/{builddeb,mkdebian}
	# add custom builddeb and mkdebian scripts
	cp -fr ../../packaging/{builddeb,mkdebian} scripts/package/
	chmod +x scripts/package/{builddeb,mkdebian}
else
	report_dir_error
fi
}

linux_configs (){
if [[ -v "MODULES" ]] && [[ ! -z "$MODULES" ]]; then
	# insert additional modules
	echo -e ${MODULES} | tr ' ' '\n' | tee -a modlist.txt > /dev/null 2>&1
	for MODLIST in `cat modlist.txt`; do
		if [[ `grep -w "${MODLIST}" "arch/${ARCH}/configs/${LINUX_DEFCONFIG}"` ]]; then :; else echo "${MODLIST}" >> "arch/${ARCH}/configs/${LINUX_DEFCONFIG}"; fi
		rm -f modlist.txt
	done
fi
if [ $CLANG -eq 1 ] && [[ "$ARCH" == "arm64" ]] && [[ -f "arch/${ARCH}/configs/${LINUX_DEFCONFIG}" ]]; then
	if [[ `grep -w "CONFIG_LTO_CLANG_THIN=y" "arch/${ARCH}/configs/${LINUX_DEFCONFIG}"` ]]; then :; else echo "CONFIG_LTO_CLANG_THIN=y" >> arch/${ARCH}/configs/${LINUX_DEFCONFIG}; fi
fi
}

cconfig (){
echo_cconfig
if [[ -f "../${DEF}/${MYCONFIG}" ]]; then
	cp -f ../${DEF}/${MYCONFIG} arch/${ARCH}/configs/
else
	echo ""
	echo -e "${MYCONFIG} was not found."
	echo -e "Check that the name is correct and in the correct location."
	echo -e "If you believe you are receiving this in error, please report it."
	read -p "Press enter to continue."
	exit 1
fi
kbuild "${MYCONFIG}"
echo ""
}

bconfig (){
echo_defconfig
if [[ -f "../${DEF}/${LINUX_DEFCONFIG}" ]]; then
	cp -f ../${DEF}/${LINUX_DEFCONFIG} arch/${ARCH}/configs/
else
	echo ""
	echo -e "${LINUX_DEFCONFIG} was not found."
	echo -e "Check that the name is correct and in the correct location."
	echo -e "If you believe you are receiving this in error, please report it."
	read -p "Press enter to continue."
	exit 1
fi
# lib/function/modconfig
linux_configs
kbuild "${LINUX_DEFCONFIG}"
echo ""
}

save_defconfig (){
if [[ -f "defconfig" ]]; then
	echo ""
	mkdir -p ../../$OUTPUT/
	# minimal
	cp -f defconfig ../../$OUTPUT/${BOARD}_defconfig
	# full
	cp -f .config ../../$OUTPUT/${BOARD}-config_defconfig
	# path to files
	ls -ls ../../$OUTPUT/${BOARD}_defconfig | sed 's/..\/..\///g'
	ls -ls ../../$OUTPUT/${BOARD}-config_defconfig | sed 's/..\/..\///g'
fi
}

menuconfig (){
echo ""
echo_menuconfig
sleep .50
kbuild "menuconfig"
sleep .25
kbuild "savedefconfig"
echo "# ${DEFAULT_MOTD} defconfig saved."
options=("Continue" "Quit")
select opt in "${options[@]}"
do
	case $opt in
		"Continue")
			save_defconfig
			break
			;;
		"Quit")
			save_defconfig
			exit 0
			;;
		*) echo "invalid option $REPLY";;
	esac
done
}

builddeb (){
if [ $CROSSCOMPILE -eq 1 ]; then echo -e "${GRN}  CC${FIN}      ${CROSS_COMPILE}${COMPILER}"; else echo -e "${GRN}  NC${FIN}      ${COMPILER}"; fi
echo ${BUILD_VERSION} > .version
echo 'y' | kbuild "LOCALVERSION= KBUILD_BUILD_USER=${KBUSER} KBUILD_BUILD_HOST=${KBHOST} bindeb-pkg"
}
