#!/bin/bash

# ATF BINARY
atf_bl31 (){ # place bl31 file.
if [[ "$FAMILY" == "rockchip" ]]; then
	RK35="../../files/boot/rk35"
	if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
		if [[ -f "../arm-trusted-firmware-${TAG}/build/${ATF_PLAT}/release/bl31/bl31.elf" ]]; then
			cp ../arm-trusted-firmware-${TAG}/build/${ATF_PLAT}/release/bl31/bl31.elf bl31.elf
			cp ../arm-trusted-firmware-${TAG}/build/${ATF_PLAT}/release/bl31/bl31.elf atf-bl31
		else
			report_atf_error
		fi
	fi
	if [[ "$FAMILY_EXT" == "rk356x" ]]; then
		if [[ -f "${RK35}/${RKBIN_ELF}" ]] && [[ -f "${RK35}/${RKBIN_RAM}" ]]; then
			cp -f ${RK35}/${RKBIN_ELF} bl31.elf
			cp -f ${RK35}/${RKBIN_ELF} atf-bl31
			cp -f ${RK35}/${RKBIN_RAM} .
			cp -f ${RKBIN_RAM} ram_init.bin
		else
			report_atf_error
		fi
		if [[ "$UBOOT_VERSION" == "v2023.07.02" ]]; then
			#export BL31="bl31.elf"
			export ROCKCHIP_TPL="${RKBIN_RAM}"
		fi
	fi
	if [[ "$FAMILY_EXT" == "rk3588" ]]; then
		if [[ -f "${RK35}/${RKBIN_ELF}" ]] && [[ -f "${RK35}/${RKBIN_RAM}" ]]; then
			export BL31="${RK35}/${RKBIN_ELF}"
			export ROCKCHIP_TPL="${RK35}/${RKBIN_RAM}"
		fi
	fi
fi
}

# U-BOOT
rockchip_uboot_config (){
if [[ "$BOARD" == "renegade" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	echo "CONFIG_USE_PREBOOT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_BOARD_LATE_INIT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_CMD_GPIO=y" >> configs/${UBOOT_DEFCONFIG}
fi
if [[ "$BOARD" == "nanopct4" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	if [[ "$UBOOT_VERSION" =~ ^(v2023.04|v2023.07.02|v2023.10)$ ]]; then
		:;
	else
		echo "CONFIG_MISC=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_PHY_ROCKCHIP_INNO_USB2=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_PHY_ROCKCHIP_TYPEC=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_USB_DWC3_GENERIC=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_DISPLAY_ROCKCHIP_EDP=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_OF_LIBFDT_OVERLAY=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_USE_PREBOOT=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_PCIE_DW_ROCKCHIP=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_ROCKCHIP_USB2_PHY=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_USB_DWC2=y" >> configs/${UBOOT_DEFCONFIG}
	fi
fi
if [[ "$BOARD" == "nanopir4se" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	echo "CONFIG_MMC_IO_VOLTAGE=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_SPL_MMC_IO_VOLTAGE=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_MMC_UHS_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_SPL_MMC_UHS_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_MMC_HS200_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_SPL_MMC_HS200_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
fi
if [[ "$BOARD" == "rockpro64" || "$BOARD" == "pinebookpro" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	echo "CONFIG_PCIE_DW_ROCKCHIP=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_OF_LIBFDT_OVERLAY=y" >> configs/${UBOOT_DEFCONFIG}
fi
if [[ "$FAMILY_EXT" == "rk356x" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	echo "CONFIG_BOOTMETH_SCRIPT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_OF_LIBFDT_OVERLAY=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_DM_VIDEO=y" >> configs/${UBOOT_DEFCONFIG}
	if [[ "$BOARD" == "nanopir5c" || "$BOARD" == "nanopir5s" ]]; then
		echo "CONFIG_MMC_IO_VOLTAGE=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_SPL_MMC_IO_VOLTAGE=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_MMC_UHS_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
		echo "CONFIG_SPL_MMC_UHS_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
	fi
fi
}

uboot_output (){
if [[ "$ARCH" == "arm" ]]; then
	# u-boot v2023.07.02
	if [[ -f "u-boot-rockchip.bin" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f u-boot-rockchip.bin ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
if [[ "$ARCH" == "arm64" ]]; then
	if [[ -f "idbloader.img" ]] && [[ -f "u-boot.itb" ]]; then
		mkdir -p ../../${OUTPUT}
		cp -f idbloader.img ../../${OUTPUT}/idbloader.bin
		cp -f u-boot.itb ../../${OUTPUT}/
		uboot_packaging
		echo ""
	else
		report_error
	fi
fi
}

rockchip_uboot_run (){
sources_dir
if [[ "$FAMILY_EXT" == "rk3328" || "$FAMILY_EXT" == "rk3399" ]]; then
	arm_trusted_firmware
fi
uboot_run
uboot_output
}

rockchip_uboot_packaging (){
if [[ "$ARCH" == "arm" ]]; then
	cp -f u-boot-rockchip.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
fi
if [[ "$ARCH" == "arm64" ]]; then
	cp -f idbloader.img ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/idbloader.bin
	cp -f u-boot.itb ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
fi
}

# LINUX
rockchip_extra_patching (){
# rockchip: all
if [[ "$FAMILY" == "rockchip" ]] && [[ -d "../../${LINUX_PATCHDIR}/../all/${LINUX_VERSION}" ]]; then
	if [[ "$FAMILY_EXT" =~ ^(rk3288|rk3328|rk3399)$ ]]; then
		if [[ `ls ../../${LINUX_PATCHDIR}/../all/${LINUX_VERSION}/*.patch` ]] > /dev/null 2>&1; then
			echo "# ${LINUX_PATCHDIR}/../all/${LINUX_VERSION}" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
			for i in ../../${LINUX_PATCHDIR}/../all/${LINUX_VERSION}/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
		fi
	fi
fi
}

# STAGE1
flash_uboot (){
if [[ "$ARCH" == "arm" ]]; then
	dd if="${OUTPUT}/u-boot-rockchip.bin" of="${IMAGE_LOOP_DEV}" seek=64
fi
if [[ "$ARCH" == "arm64" ]]; then
	dd if="${OUTPUT}/idbloader.bin" of="${IMAGE_LOOP_DEV}" seek=64
	dd if="${OUTPUT}/u-boot.itb" of="${IMAGE_LOOP_DEV}" seek=16384
fi
}

# STAGE2
rk3288_udev_rules (){
echo "# USB" > /etc/udev/rules.d/10-usb-led.rules
echo 'ACTION=="add", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", RUN+="/bin/sh -c echo default-on > /sys/class/leds/led-1/trigger"' >> /etc/udev/rules.d/10-usb-led.rules
echo 'ACTION=="remove", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", RUN+="/bin/sh -c echo none > /sys/class/leds/led-1/trigger"' >> /etc/udev/rules.d/10-usb-led.rules
sed -i "s/echo default-on > \/sys\/class\/leds\/led-1\/trigger/'echo default-on > \/sys\/class\/leds\/led-1\/trigger'/g" /etc/udev/rules.d/10-usb-led.rules
sed -i "s/echo none > \/sys\/class\/leds\/led-1\/trigger/'echo none > \/sys\/class\/leds\/led-1\/trigger'/g" /etc/udev/rules.d/10-usb-led.rules
}
