#!/bin/bash

# U-BOOT
amlogic_uboot_config (){
#if [[ "$BOARD" == "lepotato" ]]; then
#	mkdir -p "tools/logos"
#	cp ../../${PRECOMPILED_UBOOT_DIR}/../logo/${BOARD}.bmp tools/logos/libre-computer.bmp
#fi
if [[ "$BOARD" == "odroidn2" || "$BOARD" == "odroidn2l" || "$BOARD" == "odroidn2plus" ]] && [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	echo "CONFIG_CPU=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_SUPPORT_EMMC_RPMB=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_MMC_HS200_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
	echo "CONFIG_SPL_MMC_HS200_SUPPORT=y" >> configs/${UBOOT_DEFCONFIG}
fi
}

uboot_output (){
if [[ ! -z $RUN_FIP ]] && [[ -f "u-boot.bin" ]]; then
	if [[ "$FAMILY_EXT" == "ac2xx" ]]; then
		mkdir -p ../../${OUTPUT}/
		cp -f u-boot.bin ../../${OUTPUT}/chainload.bin
	fi
	echo -en "Firmware Image Package ${PNK}[${FIN}${WHT}"${RUN_FIP}"${FIN}${PNK}]${FIN} "
	echo -e "${PNK}[${FIN}${WHT}"${BOARD_FIP}"${FIN}${PNK}]${FIN}"
	export FIPDIR=$PWD/fip
	mkdir -p fip
	cp -f ../amlogic-boot-fip/${BOARD_FIP}/* fip/
	cp -f u-boot.bin fip/bl33.bin
	${RUN_FIP}
else
	report_error
fi
if [[ -f "fip/u-boot.bin" ]] && [[ -f "fip/u-boot.bin.sd.bin" ]]; then
	mkdir -p ../../${OUTPUT}
	cp -f fip/u-boot.bin ../../${OUTPUT}
	cp -f fip/u-boot.bin.sd.bin ../../${OUTPUT}
	uboot_packaging
	echo ""
else
	report_error
fi
}

amlogic_uboot_run (){
sources_dir
download_fip
uboot_run
uboot_output
}

amlogic_uboot_packaging (){
cp -f fip/u-boot.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
cp -f fip/u-boot.bin.sd.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
if [[ "$FAMILY_EXT" == "ac2xx" ]]; then
	if [[ -f "../../files/boot/uboot/${FAMILY_EXT}/${BOARD}-u-boot.bin" ]]; then
		cp -f ../../files/boot/uboot/${FAMILY_EXT}/${BOARD}-u-boot.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/vendor-u-boot.bin
	fi
	if [[ -f "../../${OUTPUT}/chainload.bin" ]]; then
		cp -f ../../${OUTPUT}/chainload.bin ${PKGNAME}_${PKGVERSION}-${BV}_${ARCH_EXT}/usr/lib/${PKGNAME}/
	fi
fi
}

amlogic_extra_wireless (){
if [[ "$BOARD" == "gateway-gz80x" ]]; then
	if [[ `ls ../../${WIRELESSPATCHES}/rtl8189fs/*.patch` ]] > /dev/null 2>&1; then
		echo "# ${WIRELESSPATCHES}/rtl8189fs" | sed -e 's/\(.*\)/\U\1/' >> ${LOG_FILE}
		for i in ../../${WIRELESSPATCHES}/rtl8189fs/*.patch; do patch -N -p1 < $i; done >> ${LOG_FILE}
	fi
fi
}

# STAGE1
flash_uboot (){
if [ $EMMC -eq 1 ]; then
	dd if=${OUTPUT}/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=1
else
	dd if=${OUTPUT}/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
	dd if=${OUTPUT}/u-boot.bin.sd.bin of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1
fi
}

flash_vendor-uboot (){
if [[ "$BOARD" == "odroidc1" ]]; then
	dd if=${OUTPUT}/bl1.bin of="${IMAGE_LOOP_DEV}" bs=1 count=442 conv=fsync
	dd if=${OUTPUT}/bl1.bin of="${IMAGE_LOOP_DEV}" bs=512 skip=1 seek=1 conv=fsync
	dd if=${OUTPUT}/u-boot.bin of="${IMAGE_LOOP_DEV}" bs=512 seek=64 conv=fsync
	dd if=/dev/zero of="${IMAGE_LOOP_DEV}" seek=1024 count=32 bs=512 conv=fsync
fi
if [[ "$FAMILY_EXT" == "odroid" ]]; then
	dd if=${PRECOMPILED_UBOOT_DIR}/u-boot.bin of="${IMAGE_LOOP_DEV}" conv=fsync,notrunc bs=512 seek=1
fi
}

# STAGE2
odroid_udev_rules (){
tee /etc/udev/rules.d/10-odroid.rules <<EOF
KERNEL=="event*", SUBSYSTEM=="input", MODE="0777"

# Automatic Disk Scheduler
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0",ATTR{queue/scheduler}="noop"
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1",ATTR{queue/scheduler}="deadline"
ACTION=="add|change", KERNEL=="mmcblk[0-9]", ATTR{queue/rotational}=="0",ATTR{queue/scheduler}="noop"
EOF
}

aml_gpiomem_rules (){
echo 'SUBSYSTEM=="aml-gpiomem", GROUP="gpio", MODE="0660"' > /etc/udev/rules.d/10-aml-gpiomem.rules
}

gateway-gz80x_udev_rules (){
echo 'KERNEL=="ttyAML2", NAME="tts/%n", SYMLINK+="zwave", GROUP="dialout", MODE="0660"' > /etc/udev/rules.d/10-zwave.rules
}

ac2xx_udev_rules (){
if [[ "$BOARD" == "x96air" ]]; then
	# udev rules
	echo "# SDCARD" > /etc/udev/rules.d/10-openvfd-led.rules
	echo 'ACTION=="add", SUBSYSTEM=="mmc", ENV{MMC_TYPE}=="SD", RUN+="/bin/sh -c echo sd > /sys/class/leds/openvfd/led_on"' >> /etc/udev/rules.d/10-openvfd-led.rules
	echo 'ACTION=="remove", SUBSYSTEM=="mmc", ENV{MMC_TYPE}=="SD", RUN+="/bin/sh -c echo sd > /sys/class/leds/openvfd/led_off"' >> /etc/udev/rules.d/10-openvfd-led.rules
	echo "# USB" >> /etc/udev/rules.d/10-openvfd-led.rules
	echo 'ACTION=="add", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", RUN+="/bin/sh -c echo usb > /sys/class/leds/openvfd/led_on"' >> /etc/udev/rules.d/10-openvfd-led.rules
	echo 'ACTION=="remove", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", RUN+="/bin/sh -c echo usb > /sys/class/leds/openvfd/led_off"' >> /etc/udev/rules.d/10-openvfd-led.rules
	sed -i "s/echo sd > \/sys\/class\/leds\/openvfd\/led_on/'echo sd > \/sys\/class\/leds\/openvfd\/led_on'/g" /etc/udev/rules.d/10-openvfd-led.rules
	sed -i "s/echo sd > \/sys\/class\/leds\/openvfd\/led_off/'echo sd > \/sys\/class\/leds\/openvfd\/led_off'/g" /etc/udev/rules.d/10-openvfd-led.rules
	sed -i "s/echo usb > \/sys\/class\/leds\/openvfd\/led_on/'echo usb > \/sys\/class\/leds\/openvfd\/led_on'/g" /etc/udev/rules.d/10-openvfd-led.rules
	sed -i "s/echo usb > \/sys\/class\/leds\/openvfd\/led_off/'echo usb > \/sys\/class\/leds\/openvfd\/led_off'/g" /etc/udev/rules.d/10-openvfd-led.rules
	echo "# HDMI" >> /etc/udev/rules.d/10-openvfd-led.rules
	echo 'ACTION=="change", SUBSYSTEM=="drm", ENV{DEVNAME}=="/dev/dri/card0", RUN+="/usr/local/sbin/hdmi-led-trigger"' >> /etc/udev/rules.d/10-openvfd-led.rules
	# hdmi helper script
	cat <<EOF > /usr/local/sbin/hdmi-led-trigger
#!/bin/bash

sleep .90
if [[ grep -w "enabled" "/sys/class/drm/card0-HDMI-A-1/enabled" ]] > /dev/null 2>&1; then
	echo "hdmi" > /sys/class/leds/openvfd/led_on
else
	echo "hdmi" > /sys/class/leds/openvfd/led_off
fi

exit 0
EOF
	sed -i 's/grep -w "enabled" "\/sys\/class\/drm\/card0-HDMI-A-1\/enabled"/`grep -w "enabled" "\/sys\/class\/drm\/card0-HDMI-A-1\/enabled"`/g' /usr/local/sbin/hdmi-led-trigger
	chmod +x /usr/local/sbin/hdmi-led-trigger
fi
}

make_uimage (){
mkdir -p /etc/initramfs/post-update.d/
cat <<EOF > "/etc/initramfs/post-update.d/99-uimage"
#!/bin/bash

if [ -f /boot/uImage ]; then
	rm -f /boot/uImage
fi
if [ -f /boot/Image ]; then
	mkimage -A arm -O linux -T kernel -C none -a 0x2080000 -e 0x2080000 -n "Linux" -d /boot/Image /boot/uImage > /dev/null 2>&1
fi

exit 0
EOF
chmod +x /etc/initramfs/post-update.d/99-uimage
chown root:root /etc/initramfs/post-update.d/99-uimage
}

flash_tool_part (){
if [[ -e "${ROOTFS}" ]] && [[ "$BOARD" == "gateway-gz80x" ]]; then
	rm -fr rootfs.PARTITION bootloader.PARTITION
	dd if=${ROOTFS} bs=1M > rootfs.PARTITION
	cp ${OUTPUT}/u-boot.bin bootloader.PARTITION
fi
}
