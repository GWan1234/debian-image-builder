#!/bin/bash

sources_dir (){
mkdir -p ${SRC}
cd ${SRC}
if [[ -d "u-boot-${UBOOT_VERSION}" ]]; then
	rm -fdr u-boot-${UBOOT_VERSION}
fi
rm -fdr {imx-mkimage,u-boot}
}

report_error (){
echo "Something went wrong? Please report."
echo ""
exit 1
}

uboot_config (){
# add default builder config options
if [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	if [[ `grep -w "CONFIG_SD_BOOT=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_SD_BOOT=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_EXT4_WRITE=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_EXT4_WRITE=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_FS_BTRFS=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_FS_BTRFS=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_CMD_BTRFS=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_CMD_BTRFS=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "CONFIG_CMD_CAT=y" "configs/${UBOOT_DEFCONFIG}"` ]]; then :; else echo "CONFIG_CMD_CAT=y" >> configs/${UBOOT_DEFCONFIG}; fi
	if [[ `grep -w "# CONFIG_CMD_SETEXPR is not set" "configs/${UBOOT_DEFCONFIG}"` ]]; then sed -i 's/# CONFIG_CMD_SETEXPR is not set//g' configs/${UBOOT_DEFCONFIG}; fi
fi
}

download_uboot (){
if [[ `wget -S --spider https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}U-Boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://github.com/pyavitz/debian-image-builder/releases/download/u-boot/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	download_uboot_denx
fi
}

download_uboot_denx (){
if [[ `wget -S --spider https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	echo -en "${WHT}U-Boot-${UBOOT_VERSION}${FIN} "
	echo -en "${PNK}[${FIN}${WHT}downloading${FIN}${PNK}]${FIN} "
	aria2c -q https://source.denx.de/u-boot/u-boot/-/archive/${UBOOT_VERSION}/u-boot-${UBOOT_VERSION}.tar.gz
	echo_bdone
else
	echo ""
	echo -e "${WHT}Version selected is not available.${FIN}"
	exit 1
fi
}

download (){
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	echo -en "${WHT}U-Boot-${UBOOT_VERSION}${FIN} "
	echo -e "${PNK}[${FIN}${YLW}found${FIN}${PNK}]${FIN}"
else
	download_uboot
fi
}

extract (){
echo ""
echo_extract
if [[ -f "u-boot-${UBOOT_VERSION}.tar.gz" ]]; then
	pv u-boot-${UBOOT_VERSION}.tar.gz | tar -xzf - -C .
	mv -f u-boot-${UBOOT_VERSION} u-boot
else
	echo -e "Missing u-boot-${UBOOT_VERSION} tarball."
	exit 1
fi
}

defconfig (){
if [[ -f "configs/${UBOOT_DEFCONFIG}" ]]; then
	ubuild "${UBOOT_DEFCONFIG}"
else
	echo ""
	echo -e "${UBOOT_DEFCONFIG} was not found."
	echo -e "Check that the name is correct in the lib/boards/${BOARD} file."
	echo -e ""
	read -p "Press enter to continue."
	exit 1
fi
}

menuconfig (){
ubuild "menuconfig"
}

builddeb (){
echo ""
echo_cuboot
if [[ "$FAMILY_EXT" == "imx8" ]]; then export ATF_LOAD_ADDR=0x920000; fi
if [ $CROSSCOMPILE -eq 1 ]; then
	echo -e "${GRN}  CC${FIN}"
	echo -e "  GCC     ${CROSS_COMPILE}${COMPILER}"
else
	echo -e "${GRN}  NC${FIN}"
	echo -e "  GCC     ${COMPILER}"
fi
ubuild ""
if [[ "$FAMILY_EXT" == "imx8" ]]; then ubuild "flash.bin"; fi
}

uboot_run (){
if [[ -v "GIT_UBOOT_URL" ]] && [[ ! -z "$GIT_UBOOT_URL" ]]; then ${FAMILY}_uboot_download; else download; extract; fi
if [[ -d "u-boot" ]]; then cd u-boot; else report_error; fi
# lib/function/atf
if [[ "$FAMILY" =~ ^(allwinner|freescale|rockchip)$ ]]; then atf_bl31; fi
# lib/function/opensbi
if [[ "$FAMILY" =~ ^(spacemit)$ ]]; then fw_dynamic; fi
# lib/function/patching
uboot_patching
# boot logo
LOGODIR="drivers/video"
BOOTLOGO="files/boot/uboot/logo/u_boot_logo.bmp"
BOOTLOGODIR="files/boot/uboot/logo"
if [[ "$RANDOM_LOGO" == "true" ]] && [[ -f "../../${BOOTLOGO}" ]]; then
	ls ../../${BOOTLOGODIR}/u_boot_logo*.bmp | shuf -n 100 | xargs -I % cp % ${LOGODIR}/u_boot_logo.bmp
else
	cp -f ../../${BOOTLOGO} ${LOGODIR}/
fi
# lib/function/$PLATFORM
uboot_config
if [[ `type ${FAMILY}_uboot_config` ]] &>/dev/null; then ${FAMILY}_uboot_config; fi
# end
export ARCH=${ARCH}
defconfig
if [ $MENUCONFIG -eq 1 ]; then menuconfig; fi
builddeb
}
